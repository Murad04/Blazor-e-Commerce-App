@inject IDeleteProductUseCase deleteProductUseCase
@inject IUpdateQuantityUseCase updateQuantityUseCase

@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink" />
        </div>
        <div class="col">
            <h5>@LineItem.Product.ProductName</h5>
            <div>
                Quantity:&nbsp;&nbsp;
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
            </div>
            <div class="mt-2">
                Price:&nbsp;&nbsp;@LineItem.Product.ProductPrice.ToString("c")
            </div>
        </div>
        <div class="col">
            <button class="btn btn-light" @onclick="@(() => DeleteProduct(LineItem.ProductID))">Delete</button>
        </div>
    </li>
}


@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; } = null!;

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }

    async void HandleQuantityChange(ChangeEventArgs e)
    {
        if (e.Value == null && string.IsNullOrWhiteSpace(e.Value.ToString())) return;
        int quantity = 0;
        if(int.TryParse(e.Value.ToString(),out quantity))
        {
            if (quantity < 0)
            {
                return;    
            }

            var order = await updateQuantityUseCase.Execute(quantity, LineItem.ProductID);
            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    async void DeleteProduct(int productID)
    {
        var order = await deleteProductUseCase.Execute(productID);
        await OnDeleteProduct.InvokeAsync(order);
    }
}